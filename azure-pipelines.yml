trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - 'website/*'
    - '*.md'
pr:
  paths:
    exclude:
    - 'website/*'
    - '*.md'

jobs:
- job: 'Test'
  variables:
    NOTEBOOK_KERNEL: "thinc-notebook-tests"
  strategy:
    matrix:
      Python36Windows:
        imageName: 'windows-2019'
        python.version: '3.6'
      Python37Mac:
        imageName: 'macos-latest'
        python.version: '3.7'
      Python38Linux:
        imageName: 'ubuntu-latest'
        python.version: '3.8'
      Python39Windows:
        imageName: 'windows-latest'
        python.version: '3.9'
      Python310Mac:
        imageName: 'macos-latest'
        python.version: '3.10'
      Python311Linux:
        imageName: 'ubuntu-latest'
        python.version: '3.11'
      Python311Windows:
        imageName: 'windows-latest'
        python.version: '3.11'
      Python311Mac:
        imageName: 'macos-latest'
        python.version: '3.11'
    maxParallel: 4
  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      allowUnstable: true

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      python setup.py build_ext --inplace
      python setup.py sdist --formats=gztar
    displayName: 'Build sdist'

  - script: |
      python -m mypy thinc --no-implicit-reexport
    displayName: 'Run mypy'
    condition: ne(variables['python.version'], '3.6')

  - task: DeleteFiles@1
    inputs:
      contents: 'thinc'
    displayName: 'Delete source directory'

  - script: |
      python -m pip freeze
      pip freeze --exclude pywin32 > installed.txt
      pip uninstall -y -r installed.txt
    displayName: 'Uninstall all packages'

  - bash: |
      SDIST=$(python -c "import os;print(os.listdir('./dist')[-1])" 2>&1)
      PIP_CONSTRAINT="build-constraints.txt" pip install dist/$SDIST
    displayName: 'Install from sdist'

  - bash: |
      python -c "import thinc"
    displayName: 'Test import'

  - script: |
      pip install -r requirements.txt
      pip install ipykernel pydot graphviz
      python -m ipykernel install --name thinc-notebook-tests --user
      python -m pytest --pyargs thinc --cov=thinc --cov-report=term
    displayName: 'Run tests without extras'

  # Notes on numpy requirements hacks:
  # 1. torch does not have a direct numpy requirement but is compiled
  # against a newer version than the oldest supported numpy for windows and
  # python 3.10; this version of numpy would not work with
  # tensorflow~=2.5.0 as specified above, but there is no release for
  # python 3.10 anyway
  # 2. restrict to numpy<1.24.0 due to mxnet incompatibility
  # 3. forbid torch!=1.13.0 due to segfaults with numpy<1.24.0
  - script: |
      pip install "protobuf~=3.20.0" "tensorflow~=2.5.0"
      pip install "mxnet; sys_platform != 'win32'"
      pip install "torch!=1.13.0" --extra-index-url https://download.pytorch.org/whl/cpu
      pip install "numpy~=1.23.0; python_version=='3.10' and sys_platform=='win32'"
      pip install "numpy<1.24.0"
      pip install -r requirements.txt
      pip uninstall -y mypy
    displayName: 'Install extras for testing'

  - script: |
      python -m pytest --pyargs thinc --cov=thinc --cov-report=term
    displayName: 'Run tests with extras'

  - script: |
      pip uninstall -y tensorflow
      pip install thinc-apple-ops
      python -m pytest --pyargs thinc_apple_ops
    displayName: 'Run tests for thinc-apple-ops'
    condition: and(startsWith(variables['imageName'], 'macos'), eq(variables['python.version'], '3.10'))

  - script: |
      python -m pytest --pyargs thinc
    displayName: 'Run tests with thinc-apple-ops'
    condition: and(startsWith(variables['imageName'], 'macos'), eq(variables['python.version'], '3.10'))
